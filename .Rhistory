knitr::opts_chunk$set(echo = TRUE)
output_dir <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_output"
input_dir <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_dataset/20190313_Lumos_Samples/Data/converted" # where samples are
library(NIHSlcms)
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
library(NIHSlcms)
library(dplyr)
library(tidyr)
library(ggplot2)
library(IPO)
library(MAIT)
})
list_mzxml_samples <- function(sample_path, file_format = "raw", rawconverter){
if (file_format == "raw") {
#install_RawConverter(rawconverter)
samples_raw <- fs::dir_ls(sample_path, glob = "*.raw")
future::plan(multiprocess)
lcms_raw_to_mzxml(samples = samples_raw, rawconverter = rawconverter)
future::plan(sequential)
sample_names_mzxml <- fs::path_abs(fs::dir_ls(sample_path, glob = "*.mzXML"))
} else if(file_format == "mzXML") {
sample_names_mzxml<- fs::path_abs(fs::dir_ls(sample_path, glob = "*.mzXML"))
} else {
stop("Not allowed file format. Use only either *.raw or *.mzMXML files")
}
sample_names_mzxml
}
# path <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_dataset/20190313_Lumos_Samples/Data"
# rawconverter <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_dataset/20190313_Lumos_Samples/Data/converted"
# samples_mzxml <- list_mzxml_samples(path, file_format = "mzXML",
#                                     rawconverter = rawconverter)
output_dir_node1 <- file.path(output_dir, "01-load-samples")
fs::dir_create(output_dir_node1)
# rawconverter <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_dataset/20190313_Lumos_Samples/Data/converted"
samples_mzxml <- list_mzxml_samples(input_dir, # converted samples directory
file_format = "mzXML",
rawconverter = rawconverter)
not_dia_samples <- samples_mzxml[!grepl(pattern = "_dia.mzXML$", x = samples_mzxml)]
dataset <- lcms_read_samples(not_dia_samples, mode = "onDisk")
print(dataset)
pData(dataset)
metadata<- readxl::read_excel("C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_dataset/20190313_Lumos_Samples/20190313_DATA_IBEC_sample_key.xlsx")
dataset <- NIHSlcms::lcms_meta_add(dataset, metadata, by = "sampleNames")
pData(dataset)
treatment_col <- scales::hue_pal()(length(unique(dataset$treatment)))
names(treatment_col) <- unique(dataset$treatment)
treatment_col
dataset_pos <- filterPolarity(dataset, polarity. = 1)
output_dir_node2 <- file.path(output_dir, "02-positive-mode")
fs::dir_create(output_dir_node2)
positive_dataset_rds <- fs::path(output_dir_node2, "positive_dataset.rds")
AlpsNMR::nmr_dataset_save(dataset_pos, positive_dataset_rds)
nmr_meta_export(dataset_pos, fs::path(output_dir_node2, "metadata.xlsx"))
library(NIHSlcms)
knitr::opts_chunk$set(echo = TRUE)
output_dir <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_output"
input_dir <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_dataset/20190313_Lumos_Samples/Data/converted" # where samples are
suppressPackageStartupMessages({
library(NIHSlcms)
library(dplyr)
library(tidyr)
library(ggplot2)
library(IPO)
library(MAIT)
})
list_mzxml_samples <- function(sample_path, file_format = "raw", rawconverter){
if (file_format == "raw") {
#install_RawConverter(rawconverter)
samples_raw <- fs::dir_ls(sample_path, glob = "*.raw")
future::plan(multiprocess)
lcms_raw_to_mzxml(samples = samples_raw, rawconverter = rawconverter)
future::plan(sequential)
sample_names_mzxml <- fs::path_abs(fs::dir_ls(sample_path, glob = "*.mzXML"))
} else if(file_format == "mzXML") {
sample_names_mzxml<- fs::path_abs(fs::dir_ls(sample_path, glob = "*.mzXML"))
} else {
stop("Not allowed file format. Use only either *.raw or *.mzMXML files")
}
sample_names_mzxml
}
# path <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_dataset/20190313_Lumos_Samples/Data"
# rawconverter <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_dataset/20190313_Lumos_Samples/Data/converted"
# samples_mzxml <- list_mzxml_samples(path, file_format = "mzXML",
#                                     rawconverter = rawconverter)
output_dir_node1 <- file.path(output_dir, "01-load-samples")
fs::dir_create(output_dir_node1)
# rawconverter <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_dataset/20190313_Lumos_Samples/Data/converted"
samples_mzxml <- list_mzxml_samples(input_dir, # converted samples directory
file_format = "mzXML",
rawconverter = rawconverter)
not_dia_samples <- samples_mzxml[!grepl(pattern = "_dia.mzXML$", x = samples_mzxml)]
dataset <- lcms_read_samples(not_dia_samples, mode = "onDisk")
print(dataset)
pData(dataset)
# lmcs_tidy_metadata <- function(samples_mzxml, metadata_xls, range_xls){
#
#     basic_meta <- tibble::tibble(sampleNames = base::basename(samples_mzxml)) %>%
#                   dplyr::mutate(sampleNumber = as.numeric(stringr::str_extract(.data$sampleNames, "[0-9]+")),
#                                 DIA = grepl("dia", .data$sampleNames))
#
#     additional_metadata <- readxl::read_excel(metadata_xls, range = range_xls) %>%
#                           dplyr::rename(sampleNumber = `sample number`)
#
#     metadata <- left_join(basic_meta, additional_metadata, by = "sampleNumber")
#     metadata
# }
#
# metadata_excel<- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_dataset/20190313_Lumos_Samples/20190313_DATA_IBEC_sample_key.xlsx"
# range_excel = "A2:C20"
# metadata <- lmcs_tidy_metadata(not_dia_samples, metadata_xls = metadata_excel, range_xls = range_excel)
metadata<- readxl::read_excel("C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_dataset/20190313_Lumos_Samples/20190313_DATA_IBEC_sample_key.xlsx")
dataset <- NIHSlcms::lcms_meta_add(dataset, metadata, by = "sampleNames")
pData(dataset)
treatment_col <- scales::hue_pal()(length(unique(dataset$treatment)))
names(treatment_col) <- unique(dataset$treatment)
treatment_col
dataset_pos <- filterPolarity(dataset, polarity. = 1)
output_dir_node2 <- file.path(output_dir, "02-positive-mode")
fs::dir_create(output_dir_node2)
positive_dataset_rds <- fs::path(output_dir_node2, "positive_dataset.rds")
AlpsNMR::nmr_dataset_save(dataset_pos, positive_dataset_rds)
nmr_meta_export(dataset_pos, fs::path(output_dir_node2, "metadata.xlsx"))
output_dir_node2 <- file.path(output_dir, "02-positive-mode")
fs::dir_create(output_dir_node2)
positive_dataset_rds <- fs::path(output_dir_node2, "positive_dataset.rds")
AlpsNMR::nmr_dataset_save(dataset_pos, positive_dataset_rds)
lcms_meta_export(dataset_pos, fs::path(output_dir_node2, "metadata.xlsx"))
library(NIHSlcms)
knitr::opts_chunk$set(echo = TRUE)
output_dir_node2 <- file.path(output_dir, "02-positive-mode")
fs::dir_create(output_dir_node2)
positive_dataset_rds <- fs::path(output_dir_node2, "positive_dataset.rds")
AlpsNMR::nmr_dataset_save(dataset_pos, positive_dataset_rds)
lcms_meta_export(dataset_pos, fs::path(output_dir_node2, "metadata.xlsx"))
View(dataset_pos)
View(dataset_pos)
View(dataset)
print(dataset)
pData(dataset)
x_lcms_meta_export <- function(lcms_dataset,
xlsx_file) {
groups_present <- groups %in% names(pData(dataset))
if (!all(groups_present)) {
warning("These metadata groups are missing and will be ignored: \n", paste(groups[!groups_present]), collapse = ", ")
groups <- groups[groups_present]
}
writexl::write_xlsx(x = lcms_dataset$metadata[groups], path = xlsx_file)
}
x_lcms_meta_export(dataset)
positive_dataset_rds <- fs::path(output_dir_node2, "positive_dataset.rds")
AlpsNMR::nmr_dataset_save(dataset_pos, positive_dataset_rds)
x_lcms_meta_export(dataset_pos, fs::path(output_dir_node2, "metadata.xlsx"))
lcms_dataset_save(dataset_pos, positive_dataset_rds)
library(NIHSlcms)
knitr::opts_chunk$set(echo = TRUE)
lcms_dataset_save(dataset_pos, positive_dataset_rds)
x_lcms_meta_export(dataset_pos, fs::path(output_dir_node2, "metadata.xlsx"))
output_dir_node2 <- file.path(output_dir, "02-positive-mode")
fs::dir_create(output_dir_node2)
x_lcms_meta_export(dataset_pos, fs::path(output_dir_node2, "metadata.xlsx"))
fs::path(output_dir_node2, "metadata.xlsx")
groups_present <- groups %in% names(pData(dataset))
groups_present <- pData(dataset)
View(groups_present)
library(NIHSlcms)
knitr::opts_chunk$set(echo = TRUE)
output_dir_node2 <- file.path(output_dir, "02-positive-mode")
fs::dir_create(output_dir_node2)
positive_dataset_rds <- fs::path(output_dir_node2, "positive_dataset.rds")
lcms_dataset_save(dataset_pos, positive_dataset_rds)
lcms_meta_export(dataset_pos, fs::path(output_dir_node2, "metadata.xlsx"))
library(NIHSlcms)
library(NIHSlcms)
knitr::opts_chunk$set(echo = TRUE)
output_dir_node2 <- file.path(output_dir, "02-positive-mode")
fs::dir_create(output_dir_node2)
positive_dataset_rds <- fs::path(output_dir_node2, "positive_dataset.rds")
lcms_dataset_save(dataset_pos, positive_dataset_rds)
lcms_meta_export(dataset_pos, fs::path(output_dir_node2, "metadata.xlsx"))
lcms_meta_export <- function(dataset,
xlsx_file) {
groups_present <- pData(dataset)
if (!all(groups_present)) {
warning("These metadata groups are missing and will be ignored: \n", paste(groups[!groups_present]), collapse = ", ")
groups <- groups[groups_present]
}
writexl::write_xlsx(x = pData(dataset), path = xlsx_file)
}
lcms_meta_export(dataset)
lcms_meta_export(dataset_pos)
groups_present <- pData(dataset)
if (!all(groups_present)) {
warning("These metadata groups are missing and will be ignored: \n", paste(groups[!groups_present]), collapse = ", ")
groups <- groups[groups_present]
}
writexl::write_xlsx(x = pData(dataset), path = xlsx_file)
output_dir_node2 <- file.path(output_dir, "02-positive-mode")
fs::dir_create(output_dir_node2)
positive_dataset_rds <- fs::path(output_dir_node2, "positive_dataset.rds")
lcms_dataset_save(dataset_pos, positive_dataset_rds)
lcms_meta_export(dataset_pos, fs::path(output_dir_node2, "metadata.xlsx"))
lcms_meta_export <- function(dataset,
xlsx_file) {
groups_present <- pData(dataset)
writexl::write_xlsx(x = pData(dataset), path = xlsx_file)
}
lcms_meta_export(dataset_pos, fs::path(output_dir_node2, "metadata.xlsx"))
library(NIHSlcms)
library(NIHSlcms)
rm(lcms_meta_export)
rm(x_lcms_meta_export)
knitr::opts_chunk$set(echo = TRUE)
output_dir_node2 <- file.path(output_dir, "02-positive-mode")
fs::dir_create(output_dir_node2)
positive_dataset_rds <- fs::path(output_dir_node2, "positive_dataset.rds")
lcms_dataset_save(dataset_pos, positive_dataset_rds)
lcms_meta_export(dataset_pos, fs::path(output_dir_node2, "metadata.xlsx"))
message(dataset_pos$num_samples, " samples loaded.")
View(dataset_pos)
dataset_pos@phenoData@varMetadata[["labelDescription"]]
message(dataset_pos$, " samples loaded.")
View(dataset_pos)
dataset_pos@phenoData@multiLabels
dataset_pos@phenoData@multiplex
dataset_pos@phenoData
message(dataset_pos@phenoData@data, " samples loaded.")
output_dir_node2 <- file.path(output_dir, "02-positive-mode")
fs::dir_create(output_dir_node2)
positive_dataset_rds <- fs::path(output_dir_node2, "positive_dataset.rds")
lcms_dataset_save(dataset_pos, positive_dataset_rds)
lcms_meta_export(dataset_pos, fs::path(output_dir_node2, "metadata.xlsx"))
experimentData(dataset_pos)
output_dir_node2 <- file.path(output_dir, "02-positive-mode")
fs::dir_create(output_dir_node2)
positive_dataset_rds <- fs::path(output_dir_node2, "positive_dataset.rds")
lcms_dataset_save(dataset_pos, positive_dataset_rds)
lcms_meta_export(dataset_pos, fs::path(output_dir_node2, "metadata.xlsx"))
lcms_tics <- function(dataset){
tics <- tibble::tibble(
file = MSnbase::fromFile(dataset),
fileName = pData(dataset)$sampleNames[file],
treatment = pData(dataset)$treatment[file],
ret_time = MSnbase::rtime(dataset),
polarity = rep(unique(MSnbase::polarity(dataset),length(file))),
tic = MSnbase::tic(dataset)
)
#Files sorted by treatment
tics$fileName <- factor(tics$fileName,
levels = unique(tics$fileName)
[base::order(dataset$treatment)])
tics
}
tics_pos <- lcms_tics(dataset_pos)
View(tics_pos)
lcms_tics <- function(dataset){
tics <- tibble::tibble(
file = MSnbase::fromFile(dataset),
fileName = pData(dataset)$sampleNames[file],
treatment = pData(dataset)$treatment[file],
ret_time = MSnbase::rtime(dataset),
polarity = rep(unique(MSnbase::polarity(dataset),length(file))),
tic = MSnbase::tic(dataset)
)
#Files sorted by treatment
tics$fileName <- factor(tics$fileName,
levels = unique(tics$fileName)
[base::order(dataset$treatment)])
tics
}
tics_pos <- lcms_tics(dataset_pos)
knitr::opts_chunk$set(echo = TRUE)
output_dir <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_output"
input_dir <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_dataset/20190313_Lumos_Samples/Data/converted" # where samples are
knitr::opts_chunk$set(echo = TRUE)
output_dir <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_output"
input_dir <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_dataset/20190313_Lumos_Samples/Data/converted" # where samples are
suppressPackageStartupMessages({
library(NIHSlcms)
library(dplyr)
library(tidyr)
library(ggplot2)
library(IPO)
library(MAIT)
})
output_dir_node1 <- file.path(output_dir, "01-load-samples")
fs::dir_create(output_dir_node1)
# rawconverter <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_dataset/20190313_Lumos_Samples/Data/converted"
samples_mzxml <- list_mzxml_samples(input_dir, # converted samples directory
file_format = "mzXML",
rawconverter = rawconverter)
list_mzxml_samples <- function(sample_path, file_format = "raw", rawconverter){
if (file_format == "raw") {
#install_RawConverter(rawconverter)
samples_raw <- fs::dir_ls(sample_path, glob = "*.raw")
future::plan(multiprocess)
lcms_raw_to_mzxml(samples = samples_raw, rawconverter = rawconverter)
future::plan(sequential)
sample_names_mzxml <- fs::path_abs(fs::dir_ls(sample_path, glob = "*.mzXML"))
} else if(file_format == "mzXML") {
sample_names_mzxml<- fs::path_abs(fs::dir_ls(sample_path, glob = "*.mzXML"))
} else {
stop("Not allowed file format. Use only either *.raw or *.mzMXML files")
}
sample_names_mzxml
}
# path <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_dataset/20190313_Lumos_Samples/Data"
# rawconverter <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_dataset/20190313_Lumos_Samples/Data/converted"
# samples_mzxml <- list_mzxml_samples(path, file_format = "mzXML",
#                                     rawconverter = rawconverter)
output_dir_node1 <- file.path(output_dir, "01-load-samples")
fs::dir_create(output_dir_node1)
# rawconverter <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_dataset/20190313_Lumos_Samples/Data/converted"
samples_mzxml <- list_mzxml_samples(input_dir, # converted samples directory
file_format = "mzXML",
rawconverter = rawconverter)
not_dia_samples <- samples_mzxml[!grepl(pattern = "_dia.mzXML$", x = samples_mzxml)]
dataset <- lcms_read_samples(not_dia_samples, mode = "onDisk")
print(dataset)
metadata<- readxl::read_excel("C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_dataset/20190313_Lumos_Samples/20190313_DATA_IBEC_sample_key.xlsx")
dataset <- NIHSlcms::lcms_meta_add(dataset, metadata, by = "sampleNames")
pData(dataset)
treatment_col <- scales::hue_pal()(length(unique(dataset$treatment)))
names(treatment_col) <- unique(dataset$treatment)
treatment_col
dataset_pos <- filterPolarity(dataset, polarity. = 1)
output_dir_node2 <- file.path(output_dir, "02-positive-mode")
fs::dir_create(output_dir_node2)
positive_dataset_rds <- fs::path(output_dir_node2, "positive_dataset.rds")
lcms_dataset_save(dataset_pos, positive_dataset_rds)
lcms_meta_export(dataset_pos, fs::path(output_dir_node2, "metadata.xlsx"))
library(NIHSlcms)
knitr::opts_chunk$set(echo = TRUE)
tics_pos <- lcms_tics(dataset_pos)
lms_plot_tics <- function(tics, rt = NULL, plot_type = "spec"){
min2sec <- 60
if (unique(tics$polarity) == 1){
polarity <- "(positive polarity)"
} else if (unique(tics$polarity) == 0){
polarity <- "(negative polarity)"
}
if(is.null(rt)){
rt <-  round (base::range(tics$ret_time) /  min2sec)
} else{
rt <- round(rt)
}
if(plot_type == "spec"){
if(diff(rt)> 6){
tick_values <- seq(from = rt[1], to = rt[2], by = 2)
}else if (diff(rt) <= 6 & diff(rt) >= 1){
tick_values <- seq(from = rt[1], to = rt[2], by = 1)
}else {
stop("Non valid retention time range")
}
ggplot(tics) +
geom_line(aes(x = ret_time /  min2sec, y = tic, color = treatment, group = file)) +
scale_x_continuous("Retention time (min)", limits = rt, breaks = tick_values) +
scale_y_continuous("Total Ion Count (a.u.)") +
scale_colour_manual("Treatment", values = treatment_col) +
ggtitle(paste("Total Ion Count across all retention times", polarity))
}else if(plot_type == "boxplot"){
tics <- tics %>% filter(ret_time >= rt[1] * min2sec & ret_time <= rt[2]* min2sec)
ggplot(tics) +
geom_boxplot(aes(x = fileName, y = tic, fill = treatment)) +
scale_fill_manual("Treatment", values = treatment_col) +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle(paste("Boxplot of the Total Ion Count by sample", polarity))
}
}
lms_plot_tics(tics_pos, rt = c(4, 14), plot_type = "spec")
lms_plot_tics(tics_pos, rt = c(4, 14), plot_type = "boxplot")
View(tics_pos)
lms_plot_tics(tics_pos, rt = c(4, 14), plot_type = "spec")
library(NIHSlcms)
library(NIHSlcms)
rm(lms_plot_tics())
rm(lms_plot_tics)
knitr::opts_chunk$set(echo = TRUE)
lms_plot_tics(tics_pos, rt = c(4, 14), plot_type = "spec")
lcms_plot_tics(tics_pos, rt = c(4, 14), plot_type = "spec")
lms_plot_tics(tics_pos, rt = c(4, 14), plot_type = "boxplot")
lcms_plot_tics(tics_pos, rt = c(4, 14), plot_type = "boxplot")
tics_pos <- lcms_tics(dataset_pos)
tics_pos <- lcms_tics(dataset_pos)
lcms_plot_tics(tics_pos, rt = c(4, 14), plot_type = "spec")
lcms_plot_tics(tics_pos, rt = c(4, 14), plot_type = "boxplot")
lcms_plot_tics(tics_pos, rt = c(4, 14), plot_type = "spec")
lcms_plot_tics(tics_pos, rt = c(4, 14), plot_type = "boxplot")
