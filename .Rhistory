# The format of LC-MS files to list (or list and convert).
file_format <- "mzXML"
# Directory where the RawConverter is.
# (in the case the files need to be converted from raw to mzXML)
rawconverter <- "C:\Users\Biosignal\Desktop\Nestle_2019\LCMS"
# Where converted samples are.
path <- input_dir
# The format of LC-MS files to list (or list and convert).
file_format <- "mzXML"
# Directory where the RawConverter is.
# (in the case the files need to be converted from raw to mzXML)
rawconverter <- "C:/Users/Biosignal/Desktop/Nestle_2019/LCMS"
samples_mzxml <- list_mzxml_samples(path, file_format = file_format,
rawconverter = rawconverter)
samples_mzxml
dataset <- suppressWarnings(lcms_read_samples(samples_mzxml, mode = "onDisk"))
output_dir_node1 <- file.path(output_dir, "01-load-samples")
fs::dir_create(output_dir_node1)
dataset_rds <- fs::path(output_dir_node1, "dataset.rds")
lcms_dataset_save(dataset, dataset_rds)
dataset <- suppressWarnings(lcms_read_samples(samples_mzxml, mode = "onDisk"))
knitr::opts_chunk$set(echo = TRUE)
library(NIHSlcms)
# Where converted samples are.
input_dir <- "C:/Users/Biosignal/Desktop/Nestle_2019/LCMS/Samples/20180319_Lumos_Test_Samples/For_Sergio"
# Where output will be stored.
output_dir <- "C:/Users/Biosignal/Desktop/Nestle_2019/LCMS/Samples/20180319_Lumos_Test_Samples/For_Sergio_output"
# Where converted samples are.
path <- input_dir
# The format of LC-MS files to list (or list and convert).
file_format <- "mzXML"
# Directory where the RawConverter is.
# (in the case the files need to be converted from raw to mzXML)
rawconverter <- "C:/Users/Biosignal/Desktop/Nestle_2019/LCMS"
samples_mzxml <- list_mzxml_samples(path, file_format = file_format,
rawconverter = rawconverter)
samples_mzxml
dataset <- suppressWarnings(lcms_read_samples(samples_mzxml, mode = "onDisk"))
print(dataset)
# Where converted samples are.
path <- input_dir
knitr::opts_chunk$set(echo = TRUE)
library(NIHSlcms)
# Where converted samples are.
input_dir <- "C:/Users/Biosignal/Desktop/Nestle_2019/LCMS/Samples/20180319_Lumos_Test_Samples/For_Sergio"
# Where output will be stored.
output_dir <- "C:/Users/Biosignal/Desktop/Nestle_2019/LCMS/Samples/20180319_Lumos_Test_Samples/For_Sergio_output"
# Where converted samples are.
input_dir <- "C:/Users/Biosignal/Desktop/Nestle_2019/LCMS/Samples/20180319_Lumos_Test_Samples/For_Sergio"
# Where output will be stored.
output_dir <- "C:/Users/Biosignal/Desktop/Nestle_2019/LCMS/Samples/20180319_Lumos_Test_Samples/For_Sergio_output"
# Where converted samples are.
path <- input_dir
# The format of LC-MS files to list (or list and convert).
file_format <- "mzXML"
# Directory where the RawConverter is.
# (in the case the files need to be converted from raw to mzXML)
rawconverter <- "C:/Users/Biosignal/Desktop/Nestle_2019/LCMS"
samples_mzxml <- list_mzxml_samples(path, file_format = file_format,
rawconverter = rawconverter)
samples_mzxml
not_dia_samples <- samples_mzxml[!grepl(pattern = "_dia.mzXML$", x = samples_mzxml)]
dataset <- suppressWarnings(lcms_read_samples(samples_mzxml, mode = "onDisk"))
print(dataset)
output_dir_node1 <- file.path(output_dir, "01-load-samples")
fs::dir_create(output_dir_node1)
dataset_rds <- fs::path(output_dir_node1, "dataset.rds")
lcms_dataset_save(dataset, dataset_rds)
# Loading the metadata
metadata<- readxl::read_excel("C:/Users/Biosignal/Desktop/Nestle_2019/LCMSs/Samples/20180319_Lumos_Test_Samples_key.xlsx")
# Loading the metadata
metadata<- readxl::read_excel("C:/Users/Biosignal/Desktop/Nestle_2019/LCMSs/Samples/20180319_Lumos_Test_Samples_key.xlsx")
# Loading the metadata
metadata<- readxl::read_excel("C:/Users/Biosignal/Desktop/Nestle_2019/LCMS/Samples/20180319_Lumos_Test_Samples_key.xlsx")
dataset <- lcms_meta_add(dataset, metadata, by = "sampleNames")
# Loading the metadata
metadata<- readxl::read_excel("C:/Users/Biosignal/Desktop/Nestle_2019/LCMS/Samples/book1.xlsx")
dataset <- lcms_meta_add(dataset, metadata, by = "sampleNames")
phData(dataset)
output_dir_node2 <- file.path(output_dir, "02-add-metadata")
fs::dir_create(output_dir_node2)
dataset_rds <- fs::path(output_dir_node2, "dataset.rds")
lcms_dataset_save(dataset, dataset_rds)
lcms_meta_export(dataset, fs::path(output_dir_node2, "metadata.xlsx"))
# Set to 1 for positive mode and 0 for negative mode.
dataset_pos <- filterPolarity(dataset, polarity. = 1)
dataset_neg <- filterPolarity(dataset, polarity. = 0)
tics_pos <- lcms_tics(dataset_pos)
# treatment_col <- scales::hue_pal()(length(unique(dataset$treatment)))
# names(treatment_col) <- unique(dataset$treatment)
lcms_plot_tics(tics_pos, treatment = treatment, rt = c(4, 14), plot_type = "spec")
lcms_plot_tics(tics_pos, treatment = treatment, rt = c(4, 14), plot_type = "boxplot")
knitr::opts_chunk$set(echo = TRUE)
library(NIHSlcms)
# Where converted samples are.
input_dir <- "C:/Users/Biosignal/Desktop/Nestle_2019/LCMS/Samples/20180319_Lumos_Test_Samples/For_Sergio"
# Where output will be stored.
output_dir <- "C:/Users/Biosignal/Desktop/Nestle_2019/LCMS/Samples/20180319_Lumos_Test_Samples/For_Sergio_output"
# Where converted samples are.
path <- input_dir
# The format of LC-MS files to list (or list and convert).
file_format <- "mzXML"
# Directory where the RawConverter is.
# (in the case the files need to be converted from raw to mzXML)
rawconverter <- "C:/Users/Biosignal/Desktop/Nestle_2019/LCMS"
samples_mzxml <- list_mzxml_samples(path, file_format = file_format,
rawconverter = rawconverter)
samples_mzxml
not_dia_samples <- samples_mzxml[!grepl(pattern = "_dia.mzXML$", x = samples_mzxml)]
dataset <- suppressWarnings(lcms_read_samples(not_dia_samples, mode = "onDisk"))
print(dataset)
dataset <- lcms_meta_add(dataset, metadata, by = "sampleNames")
# Loading the metadata
metadata<- readxl::read_excel("C:/Users/Biosignal/Desktop/Nestle_2019/LCMS/Samples/book1.xlsx")
output_dir_node1 <- file.path(output_dir, "01-load-samples")
fs::dir_create(output_dir_node1)
dataset_rds <- fs::path(output_dir_node1, "dataset.rds")
lcms_dataset_save(dataset, dataset_rds)
# Loading the metadata
metadata<- readxl::read_excel("C:/Users/Biosignal/Desktop/Nestle_2019/LCMS/Samples/book1.xlsx")
dataset <- lcms_meta_add(dataset, metadata, by = "sampleNames")
phData(dataset)
output_dir_node2 <- file.path(output_dir, "02-add-metadata")
fs::dir_create(output_dir_node2)
dataset_rds <- fs::path(output_dir_node2, "dataset.rds")
lcms_dataset_save(dataset, dataset_rds)
lcms_meta_export(dataset, fs::path(output_dir_node2, "metadata.xlsx"))
# Set to 1 for positive mode and 0 for negative mode.
dataset_pos <- filterPolarity(dataset, polarity. = 1)
dataset_neg <- filterPolarity(dataset, polarity. = 0)
tics_pos <- lcms_tics(dataset_pos)
# treatment_col <- scales::hue_pal()(length(unique(dataset$treatment)))
# names(treatment_col) <- unique(dataset$treatment)
lcms_plot_tics(tics_pos, treatment = treatment, rt = c(4, 14), plot_type = "spec")
lcms_plot_tics(tics_pos, treatment = treatment, rt = c(4, 14), plot_type = "boxplot")
knitr::opts_chunk$set(echo = TRUE)
library(NIHSlcms)
# Where converted samples are.
input_dir <- "C:/Users/Biosignal/Desktop/Nestle_2019/LCMS/Samples/20180319_Lumos_Test_Samples/For_Sergio"
# Where output will be stored.
output_dir <- "C:/Users/Biosignal/Desktop/Nestle_2019/LCMS/Samples/20180319_Lumos_Test_Samples/For_Sergio_output"
# Where converted samples are.
path <- input_dir
# The format of LC-MS files to list (or list and convert).
file_format <- "mzXML"
# Directory where the RawConverter is.
# (in the case the files need to be converted from raw to mzXML)
rawconverter <- "C:/Users/Biosignal/Desktop/Nestle_2019/LCMS"
samples_mzxml <- list_mzxml_samples(path, file_format = file_format,
rawconverter = rawconverter)
samples_mzxml
not_dia_samples <- samples_mzxml[!grepl(pattern = "_dia.mzXML$", x = samples_mzxml)]
dataset <- suppressWarnings(lcms_read_samples(not_dia_samples, mode = "onDisk"))
print(dataset)
output_dir_node1 <- file.path(output_dir, "01-load-samples")
fs::dir_create(output_dir_node1)
dataset_rds <- fs::path(output_dir_node1, "dataset.rds")
lcms_dataset_save(dataset, dataset_rds)
# Loading the metadata
metadata<- readxl::read_excel("C:/Users/Biosignal/Desktop/Nestle_2019/LCMS/Samples/book1.xlsx")
dataset <- lcms_meta_add(dataset, metadata, by = "sampleNames")
phData(dataset)
output_dir_node2 <- file.path(output_dir, "02-add-metadata")
fs::dir_create(output_dir_node2)
dataset_rds <- fs::path(output_dir_node2, "dataset.rds")
lcms_dataset_save(dataset, dataset_rds)
lcms_meta_export(dataset, fs::path(output_dir_node2, "metadata.xlsx"))
# Set to 1 for positive mode and 0 for negative mode.
dataset_pos <- filterPolarity(dataset, polarity. = 1)
dataset_neg <- filterPolarity(dataset, polarity. = 0)
tics_pos <- lcms_tics(dataset_pos)
# treatment_col <- scales::hue_pal()(length(unique(dataset$treatment)))
# names(treatment_col) <- unique(dataset$treatment)
lcms_plot_tics(tics_pos, treatment = treatment, rt = c(4, 14), plot_type = "spec")
lcms_plot_tics(tics_pos, treatment = treatment, rt = c(4, 14), plot_type = "boxplot")
tics_neg <- lcms_tics(dataset_neg)
lcms_plot_tics(tics_neg, rt = c(4, 14), plot_type = "spec")
lcms_plot_tics(tics_neg, rt = c(4, 14), plot_type = "boxplot")
output_dir_node3 <- file.path(output_dir, "03-split-polarities")
fs::dir_create(output_dir_node3)
positive_dataset_rds <- fs::path(output_dir_node3, "positive_dataset.rds")
lcms_dataset_save(dataset_pos, positive_dataset_rds)
negative_dataset_rds <- fs::path(output_dir_node3, "negative_dataset.rds")
lcms_dataset_save(dataset_neg, negative_dataset_rds)
lcms_meta_export(dataset_pos, fs::path(output_dir_node3, "metadata.xlsx"))
# Range of the retention time (minutes) to include in further analyses
rt = c(4, 14)
dataset_pos <- filterRTmin(dataset_pos, rt = rt)
dataset_neg <- filterRTmin(dataset_neg, rt = rt)
# There are not QCs or blank samples in the present dataset
# An example is: especial_samples = list(QC = "DMSO-Ctrl", blank = "blank")
especial_samples = list(QC = "Ctrl")
dataset_pos_by_class_type <- filterSampleType(dataset_pos, especial_samples = especial_samples)
dataset_neg_by_class_type <- filterSampleType(dataset_neg, especial_samples = especial_samples)
dataset_pos_no_blanks <-dataset_pos_by_class_type$regular_samples
# dataset_pos_blanks <- dataset_pos_by_class_type$blanks
dataset_pos_qcs <- dataset_pos_by_class_type$QCs
dataset_neg_no_blanks <-dataset_neg_by_class_type$regular_samples
# dataset_neg_blanks <- dataset_neg_by_class_type$blanks
dataset_neg_qcs <- dataset_neg_by_class_type$QCs
output_dir_node4 <- file.path(output_dir, "04-filtered-samples")
fs::dir_create(output_dir_node4)
positive_dataset_no_blanks_rds <- fs::path(output_dir_node4, "dataset_pos_no_blanks.rds")
lcms_dataset_save(dataset_pos_no_blanks, positive_dataset_no_blanks_rds)
negative_dataset_no_blanks_rds <- fs::path(output_dir_node4, "dataset_neg_no_blanks.rds")
lcms_dataset_save(dataset_neg_no_blanks, negative_dataset_no_blanks_rds)
lcms_meta_export(dataset_pos_no_blanks, fs::path(output_dir_node4, "metadata.xlsx"))
# In this step, we need to create a new folder to storage the optimization process
# The function requires this new and empty folder before running the optimization
output_dir_node5 <- file.path(output_dir, "05-optimization")
fs::dir_create(output_dir_node5)
# dataset used to optimize (control samples in this case for minimun time computation)
# you can use dataset_pos to use all samples
lcms_dataset = dataset_pos_qcs
# if to optimize or not
optimize = TRUE
# number of rounds, by default nSlaves = 1 because does the necessary to find the optimum
nSlaves = 1
# directory created for this purpose
opt_path = output_dir_node5
output_dir_node5
default_peakpeaking_params <- lcms_default_peakpeaking_params(optimize = optimize)
resultPeakpicking<- lcms_peakpicking_optimization(lcms_dataset = lcms_dataset,
peakpickingParameters = default_peakpeaking_params,
nSlaves = nSlaves,
opt_path = opt_path,
plots = TRUE)
# In this step, we need to create a new folder to storage the optimization process
# The function requires this new and empty folder before running the optimization
output_dir_node5 <- file.path(output_dir, "05-optimization")
fs::dir_create(output_dir_node5)
# dataset used to optimize (control samples in this case for minimun time computation)
# you can use dataset_pos to use all samples
lcms_dataset = dataset_pos_qcs
# if to optimize or not
optimize = TRUE
# number of rounds, by default nSlaves = 1 because does the necessary to find the optimum
nSlaves = 1
# directory created for this purpose
opt_path = output_dir_node5
output_dir_node5
default_peakpeaking_params <- lcms_default_peakpeaking_params(optimize = optimize)
resultPeakpicking<- lcms_peakpicking_optimization(lcms_dataset = lcms_dataset,
peakpickingParameters = default_peakpeaking_params,
nSlaves = nSlaves,
opt_path = opt_path,
plots = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(NIHSlcms)
# Where converted samples are.
input_dir <- "C:/Users/Biosignal/Desktop/Nestle_2019/LCMS/Samples/20180319_Lumos_Test_Samples/For_Sergio"
# Where output will be stored.
output_dir <- "C:/Users/Biosignal/Desktop/Nestle_2019/LCMS/Samples/20180319_Lumos_Test_Samples/For_Sergio_output"
# Where converted samples are.
path <- input_dir
# The format of LC-MS files to list (or list and convert).
file_format <- "mzXML"
# Directory where the RawConverter is.
# (in the case the files need to be converted from raw to mzXML)
rawconverter <- "C:/Users/Biosignal/Desktop/Nestle_2019/LCMS"
samples_mzxml <- list_mzxml_samples(path, file_format = file_format,
rawconverter = rawconverter)
samples_mzxml
not_dia_samples <- samples_mzxml[!grepl(pattern = "_dia.mzXML$", x = samples_mzxml)]
dataset <- suppressWarnings(lcms_read_samples(not_dia_samples, mode = "onDisk"))
print(dataset)
output_dir_node1 <- file.path(output_dir, "01-load-samples")
fs::dir_create(output_dir_node1)
dataset_rds <- fs::path(output_dir_node1, "dataset.rds")
lcms_dataset_save(dataset, dataset_rds)
# Loading the metadata
metadata<- readxl::read_excel("C:/Users/Biosignal/Desktop/Nestle_2019/LCMS/Samples/book1.xlsx")
dataset <- lcms_meta_add(dataset, metadata, by = "sampleNames")
phData(dataset)
output_dir_node2 <- file.path(output_dir, "02-add-metadata")
fs::dir_create(output_dir_node2)
dataset_rds <- fs::path(output_dir_node2, "dataset.rds")
lcms_dataset_save(dataset, dataset_rds)
lcms_meta_export(dataset, fs::path(output_dir_node2, "metadata.xlsx"))
# Set to 1 for positive mode and 0 for negative mode.
dataset_pos <- filterPolarity(dataset, polarity. = 1)
dataset_neg <- filterPolarity(dataset, polarity. = 0)
tics_pos <- lcms_tics(dataset_pos)
# treatment_col <- scales::hue_pal()(length(unique(dataset$treatment)))
# names(treatment_col) <- unique(dataset$treatment)
lcms_plot_tics(tics_pos, treatment = treatment, rt = c(4, 14), plot_type = "spec")
lcms_plot_tics(tics_pos, treatment = treatment, rt = c(4, 14), plot_type = "boxplot")
tics_neg <- lcms_tics(dataset_neg)
lcms_plot_tics(tics_neg, rt = c(4, 14), plot_type = "spec")
lcms_plot_tics(tics_neg, rt = c(4, 14), plot_type = "boxplot")
output_dir_node3 <- file.path(output_dir, "03-split-polarities")
fs::dir_create(output_dir_node3)
positive_dataset_rds <- fs::path(output_dir_node3, "positive_dataset.rds")
lcms_dataset_save(dataset_pos, positive_dataset_rds)
negative_dataset_rds <- fs::path(output_dir_node3, "negative_dataset.rds")
lcms_dataset_save(dataset_neg, negative_dataset_rds)
lcms_meta_export(dataset_pos, fs::path(output_dir_node3, "metadata.xlsx"))
# Range of the retention time (minutes) to include in further analyses
rt = c(4, 14)
dataset_pos <- filterRTmin(dataset_pos, rt = rt)
dataset_neg <- filterRTmin(dataset_neg, rt = rt)
# There are not QCs or blank samples in the present dataset
# An example is: especial_samples = list(QC = "DMSO-Ctrl", blank = "blank")
especial_samples = list(QC = "Ctrl")
knitr::opts_chunk$set(echo = TRUE)
library(NIHSlcms)
# Where converted samples are.
input_dir <- "C:/Users/Biosignal/Desktop/Nestle_2019/LCMS/Samples/20180319_Lumos_Test_Samples/For_Sergio"
# Where output will be stored.
output_dir <- "C:/Users/Biosignal/Desktop/Nestle_2019/LCMS/Samples/20180319_Lumos_Test_Samples/For_Sergio_output"
library(NIHSlcms)
# Where converted samples are.
input_dir <- "C:/Users/Biosignal/Desktop/Nestle_2019/LCMS/Samples/20180319_Lumos_Test_Samples/For_Sergio"
# Where output will be stored.
output_dir <- "C:/Users/Biosignal/Desktop/Nestle_2019/LCMS/Samples/20180319_Lumos_Test_Samples/For_Sergio_output"
# Where converted samples are.
path <- input_dir
# The format of LC-MS files to list (or list and convert).
file_format <- "mzXML"
# Directory where the RawConverter is.
# (in the case the files need to be converted from raw to mzXML)
rawconverter <- "C:/Users/Biosignal/Desktop/Nestle_2019/LCMS"
samples_mzxml <- list_mzxml_samples(path, file_format = file_format,
rawconverter = rawconverter)
samples_mzxml
not_dia_samples <- samples_mzxml[!grepl(pattern = "_dia.mzXML$", x = samples_mzxml)]
dataset <- suppressWarnings(lcms_read_samples(not_dia_samples, mode = "onDisk"))
print(dataset)
output_dir_node1 <- file.path(output_dir, "01-load-samples")
fs::dir_create(output_dir_node1)
dataset_rds <- fs::path(output_dir_node1, "dataset.rds")
lcms_dataset_save(dataset, dataset_rds)
# Loading the metadata
metadata<- readxl::read_excel("C:/Users/Biosignal/Desktop/Nestle_2019/LCMS/Samples/book1.xlsx")
dataset <- lcms_meta_add(dataset, metadata, by = "sampleNames")
phData(dataset)
output_dir_node2 <- file.path(output_dir, "02-add-metadata")
fs::dir_create(output_dir_node2)
dataset_rds <- fs::path(output_dir_node2, "dataset.rds")
lcms_dataset_save(dataset, dataset_rds)
lcms_meta_export(dataset, fs::path(output_dir_node2, "metadata.xlsx"))
# Set to 1 for positive mode and 0 for negative mode.
dataset_pos <- filterPolarity(dataset, polarity. = 1)
dataset_neg <- filterPolarity(dataset, polarity. = 0)
tics_pos <- lcms_tics(dataset_pos)
# treatment_col <- scales::hue_pal()(length(unique(dataset$treatment)))
# names(treatment_col) <- unique(dataset$treatment)
lcms_plot_tics(tics_pos, treatment = treatment, rt = c(4, 14), plot_type = "spec")
lcms_plot_tics(tics_pos, treatment = treatment, rt = c(4, 14), plot_type = "boxplot")
tics_neg <- lcms_tics(dataset_neg)
lcms_plot_tics(tics_neg, rt = c(4, 14), plot_type = "spec")
lcms_plot_tics(tics_neg, rt = c(4, 14), plot_type = "boxplot")
output_dir_node3 <- file.path(output_dir, "03-split-polarities")
fs::dir_create(output_dir_node3)
positive_dataset_rds <- fs::path(output_dir_node3, "positive_dataset.rds")
lcms_dataset_save(dataset_pos, positive_dataset_rds)
negative_dataset_rds <- fs::path(output_dir_node3, "negative_dataset.rds")
lcms_dataset_save(dataset_neg, negative_dataset_rds)
lcms_meta_export(dataset_pos, fs::path(output_dir_node3, "metadata.xlsx"))
# Range of the retention time (minutes) to include in further analyses
rt = c(4, 14)
dataset_pos <- filterRTmin(dataset_pos, rt = rt)
dataset_neg <- filterRTmin(dataset_neg, rt = rt)
# There are not QCs or blank samples in the present dataset
# An example is: especial_samples = list(QC = "DMSO-Ctrl", blank = "blank")
especial_samples = list(QC = "DMSO_Ctrl")
dataset_pos_by_class_type <- filterSampleType(dataset_pos, especial_samples = especial_samples)
dataset_neg_by_class_type <- filterSampleType(dataset_neg, especial_samples = especial_samples)
dataset_pos_no_blanks <-dataset_pos_by_class_type$regular_samples
# dataset_pos_blanks <- dataset_pos_by_class_type$blanks
dataset_pos_qcs <- dataset_pos_by_class_type$QCs
dataset_neg_no_blanks <-dataset_neg_by_class_type$regular_samples
# dataset_neg_blanks <- dataset_neg_by_class_type$blanks
dataset_neg_qcs <- dataset_neg_by_class_type$QCs
output_dir_node4 <- file.path(output_dir, "04-filtered-samples")
fs::dir_create(output_dir_node4)
positive_dataset_no_blanks_rds <- fs::path(output_dir_node4, "dataset_pos_no_blanks.rds")
lcms_dataset_save(dataset_pos_no_blanks, positive_dataset_no_blanks_rds)
negative_dataset_no_blanks_rds <- fs::path(output_dir_node4, "dataset_neg_no_blanks.rds")
lcms_dataset_save(dataset_neg_no_blanks, negative_dataset_no_blanks_rds)
lcms_meta_export(dataset_pos_no_blanks, fs::path(output_dir_node4, "metadata.xlsx"))
# In this step, we need to create a new folder to storage the optimization process
# The function requires this new and empty folder before running the optimization
output_dir_node5 <- file.path(output_dir, "05-optimization")
fs::dir_create(output_dir_node5)
# dataset used to optimize (control samples in this case for minimun time computation)
# you can use dataset_pos to use all samples
lcms_dataset = dataset_pos_qcs
# if to optimize or not
optimize = TRUE
# number of rounds, by default nSlaves = 1 because does the necessary to find the optimum
nSlaves = 1
# directory created for this purpose
opt_path = output_dir_node5
output_dir_node5
default_peakpeaking_params <- lcms_default_peakpeaking_params(optimize = optimize)
resultPeakpicking<- lcms_peakpicking_optimization(lcms_dataset = lcms_dataset,
peakpickingParameters = default_peakpeaking_params,
nSlaves = nSlaves,
opt_path = opt_path,
plots = TRUE)
# Where converted samples are.
input_dir <- "C:/Users/Biosignal/Desktop/Nestle_2019/LCMS/Samples/20180319_Lumos_Test_Samples/For_Sergio"
# Where output will be stored.
output_dir <- "C:/Users/Biosignal/Desktop/Nestle_2019/LCMS/Samples/20180319_Lumos_Test_Samples/For_Sergio_output"
library(NIHSlcms)
library(NIHSlcms)
path <- system.file("extdata", "1.raw", package = "NIHSlcms")
samples_mzxml <- list_mzxml_samples(path,
file_format = "raw",
rawconverter = rawconverter_path)
library(NIHSlcms)
rawconverter_path <-"C:/Users/Biosignal/Desktop/Nestle_2019/LCMS"
path <- system.file("extdata", "1.raw", package = "NIHSlcms")
samples_mzxml <- list_mzxml_samples(path,
file_format = "raw",
rawconverter = rawconverter_path)
path <- system.file("extdata", "1.mzXML", package = "NIHSlcms")
samples_mzxml <- list_mzxml_samples(path,
file_format = "mzXML",
rawconverter = rawconverter_path)
hola<-getwd()
setwd('C:/Users/Biosignal/Documents/R/win-library/3.5/NIHSlcms/extdata/1.mzXML')
setwd('C:/Users/Biosignal/Documents/R/win-library/3.5/NIHSlcms/extdata')
getwd()
rawconverter_path <-"C:/Users/Biosignal/Desktop/Nestle_2019/LCMS"
path <- system.file("extdata", package = "NIHSlcms")
samples_mzxml <- list_mzxml_samples(path,
file_format = "raw",
rawconverter = rawconverter_path)
library(NIHSlcms)
library(NIHSlcms)
sample_path <- system.file("extdata", package = "NIHSlcms")
samples_mzxml <- list_mzxml_samples(sample_path,
file_format = "mzXML")
sample_path <- system.file("extdata", package = "NIHSlcms")
samples_mzxml <- list_mzxml_samples(sample_path,
file_format = "mzXML")
print(samples_mzxml)
library(NIHSlcms)
library(NIHSlcms)
sample_path <- system.file("extdata", package = "NIHSlcms")
samples_mzxml <- lcms_list_mzxml_samples(sample_path,
file_format = "mzXML")
print(samples_mzxml)
library(NIHSlcms)
sample_path <- system.file("extdata", package = "NIHSlcms")
samples_mzxml <- lcms_list_mzxml_samples(sample_path,
file_format = "mzXML")
sample_path <- system.file("extdata", package = "NIHSlcms")
samples_mzxml <- lcms_list_mzxml_samples(sample_path,
file_format = "mzXML")
sample_path <- system.file("extdata", package = "NIHSlcms")
samples_mzxml <- lcms_list_mzxml_samples(sample_path,
file_format = "mzXML")
library(NIHSlcms)
sample_path <- "C:/Users/Biosignal/Desktop/Nestle_2019/LCMS/Samples/20180319_Lumos_Test_Samples/For_Sergio"
rawconverter_part <- "C:/Users/Biosignal/Desktop/Nestle_2019/LCMS"
rawconverter_path <- "C:/Users/Biosignal/Desktop/Nestle_2019/LCMS"
samples_mzxml <- lcms_list_mzxml_samples(sample_path,
file_format = "raw",
rawconverter_path = rawconverter_path)
getwd()
getwd()
hola <-getwd()
sample_path <- system.file("extdata", package = "NIHSlcms")
samples_mzxml <- lcms_list_mzxml_samples(sample_path,
file_format = "mzXML")
library(NISHlcms)
library(NIHSlcms)
sample_path <- system.file("extdata", package = "NIHSlcms")
samples_mzxml <- lcms_list_mzxml_samples(sample_path,
file_format = "mzXML")
getwd()
save(samples_mzxml)
help(save)
save(samples_mzxml, file = "samples_mzxml.Rdata")
devtools::use_data(samples_mzxml)
library(devtools)
use_data(samples_mzxml)
library(NIHSlcms)
#' @examples
#' sample_path <- system.file("data", package = "NIHSlcms")
#' samples_mzxml <- lcms_read_samples(sample_path,
#'                                     file_format = "mzXML")
#'
#' \dontrun{
#' samples_mzxml <- lcms_list_mzxml_samples(sample_path,
#'                                     file_format = "raw",
#'                                     rawconverter_path = rawconverter_path)
#'}
system.file("data", "samples_mzxml", package = "NIHSlcms")
system.file("data", "samples_mzxml.rda", package = "NIHSlcms")
amigo <- system.file("data", "samples_mzxml.rda", package = "NIHSlcms")
help("use_data")
sample_path <- system.file("extdata", package = "NIHSlcms")
samples_mzxml <- lcms_list_mzxml_samples(sample_path,  file_format = "mzXML")
use_data(samples_mzxml,name = "samples_mzxml")
use_data(samples_mzxml)
use_data(samples_mzxml)
library(NIHSlcms)
data(samples_mzxml)
data(samples_mzxml)
dataset <- suppressWarnings(lcms_read_samples(samples_mzxml, mode = "onDisk"))
edit(readMSData)
edit(readMSData)
library(MSnbase)
edit(readMSData)
library(NIHSlcms)
data(samples_mzxml)
dataset <- suppressWarnings(lcms_read_samples(samples_mzxml, mode = "onDisk"))
print(dataset)
