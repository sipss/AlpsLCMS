resultPeakpicking
optimizedXcmsSetObject <- resultPeakpicking$best_settings$xset
optimizedXcmsSetObject
resultPeakpicking_opt_rds <- fs::path(output_dir_node5, "resultPeakpicking_opt.rds")
lcms_dataset_save(resultPeakpicking, resultPeakpicking_opt_rds)
optimizedXcmsSetObject_rds <- fs::path(output_dir_node5, "optimizedXcmsSetObject.rds")
lcms_dataset_save(optimizedXcmsSetObject, optimizedXcmsSetObject_rds)
optimize = TRUE
nSlaves = 1
opt_path = output_dir_node5
output_dir_node5
optimize = FALSE
nSlaves = 1
opt_path = output_dir_node5
output_dir_node5
retcorGroupParameters <- lcms_default_corgroup_params(optimize = optimize)
resultRetcorGroup  <- lcms_corgroup_optimization(optimizedXcmsSetObject = optimizedXcmsSetObject,
retcorGroupParameters = retcorGroupParameters,
nSlaves = nSlaves,
opt_path = opt_path)
### Important file
IPO_params = write_opt_params(resultPeakpicking, resultRetcorGroup, output_dir_node5)
resultRetcorGroup_opt_rds <- fs::path(output_dir_node5, "resultRetcorGroup_opt.rds")
lcms_dataset_save(resultRetcorGroup, resultRetcorGroup_opt_rds)
### Important file
IPO_params = write_opt_params(resultPeakpicking, resultRetcorGroup, output_dir_node5)
resultRetcorGroup_opt_rds <- fs::path(output_dir_node5, "resultRetcorGroup_opt.rds")
lcms_dataset_save(resultRetcorGroup, resultRetcorGroup_opt_rds)
### Important file
IPO_params = write_opt_params(resultPeakpicking, resultRetcorGroup, output_dir_node5)
### Important file
IPO_params = write_opt_params(resultPeakpicking, resultRetcorGroup, output_dir_node5)
# Weindicate the directory in which the params.csv with the optimization is stored.
# Note that another previous params.csv file from last optimization steps could be used here.
directory_params <- output_dir_node5
preproc_params <- read_IPO_to_XCMS(directory_params)
output_dir_node6 <- file.path(output_dir, "06-rearrange-XCMS-MAIT-pos")
fs::dir_create(output_dir_node6)
path <- output_dir_node6
lcms_dataset = dataset_pos_no_blanks
project <- "LUMOS"
rearrange_datafiles_by_class(lcms_dataset = lcms_dataset,
dataDir = path)
library(NIHSlcms)
library(NIHSlcms)
save.image("C:/Users/fmadrid/Desktop/WS_building_NIHSlcms_.RData")
load("C:/Users/fmadrid/Desktop/WS_building_NIHSlcms_.RData")
load("C:/Users/fmadrid/Desktop/WS_building_NIHSlcms.RData")
library(NIHSlcms)
knitr::opts_chunk$set(echo = TRUE)
output_dir_node6 <- file.path(output_dir, "06-rearrange-XCMS-MAIT-pos")
fs::dir_create(output_dir_node6)
path <- output_dir_node6
lcms_dataset = dataset_pos_no_blanks
project <- "LUMOS"
rearrange_datafiles_by_class(lcms_dataset = lcms_dataset,
dataDir = path)
View(dataset_pos_no_blanks)
lcms_dataset = dataset_pos_no_blanks
project <- "LUMOS"
output_dir_node6 <- file.path(output_dir, "06-rearrange-XCMS-MAIT-pos")
fs::dir_create(output_dir_node6)
path <- output_dir_node6
lcms_dataset = dataset_pos_no_blanks
project <- "LUMOS"
rearrange_datafiles_by_class(lcms_dataset = lcms_dataset,
dataDir = path)
library(NIHSlcms)
# Where converted samples are.
input_dir <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_dataset/20190313_Lumos_Samples/Data/converted"
# Where output will be stored.
output_dir <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_output"
# Where converted samples are.
path <- input_dir
# The format of LC-MS files to list (or list and convert).
file_format <- "mzXML"
# Directory where the RawConverter is.
# (in the case the files need to be converted from raw to mzXML)
rawconverter <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS"
samples_mzxml <- list_mzxml_samples(path, file_format = file_format,
rawconverter = rawconverter)
samples_mzxml
dataset <- lcms_read_samples(samples_mzxml, mode = "onDisk")
print(dataset)
output_dir_node1 <- file.path(output_dir, "01-load-samples")
fs::dir_create(output_dir_node1)
dataset_rds <- fs::path(output_dir_node1, "dataset.rds")
lcms_dataset_save(dataset, dataset_rds)
# Loading the metadata
metadata<- readxl::read_excel("C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_dataset/20190313_Lumos_Samples/20190313_DATA_IBEC_sample_key2.xlsx")
View(metadata)
dataset <- lcms_meta_add(dataset, metadata, by = "sampleNames")
phData(dataset)
output_dir_node2 <- file.path(output_dir, "02-add-metadata")
fs::dir_create(output_dir_node2)
dataset_rds <- fs::path(output_dir_node2, "dataset.rds")
lcms_dataset_save(dataset, dataset_rds)
lcms_meta_export(dataset, fs::path(output_dir_node2, "metadata.xlsx"))
# Set to 1 for positive mode and 0 for negative mode.
dataset_pos <- filterPolarity(dataset, polarity. = 1)
dataset_neg <- filterPolarity(dataset, polarity. = 0)
tics_pos <- lcms_tics(dataset_pos)
# treatment_col <- scales::hue_pal()(length(unique(dataset$treatment)))
# names(treatment_col) <- unique(dataset$treatment)
lcms_plot_tics(tics_pos, treatment = treatment, rt = c(4, 14), plot_type = "spec")
lcms_plot_tics(tics_pos, treatment = treatment, rt = c(4, 14), plot_type = "boxplot")
tics_neg <- lcms_tics(dataset_neg)
lcms_plot_tics(tics_neg, rt = c(4, 14), plot_type = "spec")
lcms_plot_tics(tics_neg, rt = c(4, 14), plot_type = "boxplot")
output_dir_node3 <- file.path(output_dir, "03-split-polarities")
fs::dir_create(output_dir_node3)
positive_dataset_rds <- fs::path(output_dir_node3, "positive_dataset.rds")
lcms_dataset_save(dataset_pos, positive_dataset_rds)
negative_dataset_rds <- fs::path(output_dir_node3, "negative_dataset.rds")
lcms_dataset_save(dataset_neg, negative_dataset_rds)
lcms_meta_export(dataset_pos, fs::path(output_dir_node3, "metadata.xlsx"))
# Range of the retention time (minutes) to include in further analyses
rt = c(4, 14)
dataset_pos <- filterRTmin(dataset_pos, rt = rt)
dataset_neg <- filterRTmin(dataset_neg, rt = rt)
# There are not QCs or blank samples in the present dataset
# An example is: especial_samples = list(QC = "DMSO-Ctrl", blank = "blank")
especial_samples = NULL
dataset_pos_by_class_type <- filterSampleType(dataset_pos, especial_samples = especial_samples)
library(NIHSlcms)
knitr::opts_chunk$set(echo = TRUE)
library(NIHSlcms)
# Where converted samples are.
input_dir <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_dataset/20190313_Lumos_Samples/Data/converted"
# Where output will be stored.
output_dir <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_output"
# Where converted samples are.
path <- input_dir
# The format of LC-MS files to list (or list and convert).
file_format <- "mzXML"
# Directory where the RawConverter is.
# (in the case the files need to be converted from raw to mzXML)
rawconverter <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS"
samples_mzxml <- list_mzxml_samples(path, file_format = file_format,
rawconverter = rawconverter)
samples_mzxml
dataset <- lcms_read_samples(samples_mzxml, mode = "onDisk")
print(dataset)
knitr::opts_chunk$set(echo = TRUE)
library(NIHSlcms)
# Where converted samples are.
input_dir <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_dataset/20190313_Lumos_Samples/Data/converted"
# Where output will be stored.
output_dir <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_output"
# Where converted samples are.
path <- input_dir
# The format of LC-MS files to list (or list and convert).
file_format <- "mzXML"
# Directory where the RawConverter is.
# (in the case the files need to be converted from raw to mzXML)
rawconverter <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS"
samples_mzxml <- list_mzxml_samples(path, file_format = file_format,
rawconverter = rawconverter)
samples_mzxml
dataset <- suppressPackageStartupMessages(lcms_read_samples(samples_mzxml, mode = "onDisk"))
print(dataset)
dataset <- suppressWarnings(lcms_read_samples(samples_mzxml, mode = "onDisk"))
print(dataset)
knitr::opts_chunk$set(echo = TRUE)
library(NIHSlcms)
# Where converted samples are.
input_dir <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_dataset/20190313_Lumos_Samples/Data/converted"
# Where output will be stored.
output_dir <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_output"
# Where converted samples are.
path <- input_dir
# The format of LC-MS files to list (or list and convert).
file_format <- "mzXML"
# Directory where the RawConverter is.
# (in the case the files need to be converted from raw to mzXML)
rawconverter <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS"
samples_mzxml <- list_mzxml_samples(path, file_format = file_format,
rawconverter = rawconverter)
samples_mzxml
dataset <- suppressWarnings(lcms_read_samples(samples_mzxml, mode = "onDisk"))
print(dataset)
output_dir_node1 <- file.path(output_dir, "01-load-samples")
fs::dir_create(output_dir_node1)
dataset_rds <- fs::path(output_dir_node1, "dataset.rds")
lcms_dataset_save(dataset, dataset_rds)
# Loading the metadata
metadata<- readxl::read_excel("C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_dataset/20190313_Lumos_Samples/20190313_DATA_IBEC_sample_key2.xlsx")
dataset <- lcms_meta_add(dataset, metadata, by = "sampleNames")
phData(dataset)
output_dir_node2 <- file.path(output_dir, "02-add-metadata")
fs::dir_create(output_dir_node2)
dataset_rds <- fs::path(output_dir_node2, "dataset.rds")
lcms_dataset_save(dataset, dataset_rds)
lcms_meta_export(dataset, fs::path(output_dir_node2, "metadata.xlsx"))
# Set to 1 for positive mode and 0 for negative mode.
dataset_pos <- filterPolarity(dataset, polarity. = 1)
dataset_neg <- filterPolarity(dataset, polarity. = 0)
tics_pos <- lcms_tics(dataset_pos)
# treatment_col <- scales::hue_pal()(length(unique(dataset$treatment)))
# names(treatment_col) <- unique(dataset$treatment)
lcms_plot_tics(tics_pos, treatment = treatment, rt = c(4, 14), plot_type = "spec")
lcms_plot_tics(tics_pos, treatment = treatment, rt = c(4, 14), plot_type = "boxplot")
tics_neg <- lcms_tics(dataset_neg)
lcms_plot_tics(tics_neg, rt = c(4, 14), plot_type = "spec")
lcms_plot_tics(tics_neg, rt = c(4, 14), plot_type = "boxplot")
output_dir_node3 <- file.path(output_dir, "03-split-polarities")
fs::dir_create(output_dir_node3)
positive_dataset_rds <- fs::path(output_dir_node3, "positive_dataset.rds")
lcms_dataset_save(dataset_pos, positive_dataset_rds)
negative_dataset_rds <- fs::path(output_dir_node3, "negative_dataset.rds")
lcms_dataset_save(dataset_neg, negative_dataset_rds)
lcms_meta_export(dataset_pos, fs::path(output_dir_node3, "metadata.xlsx"))
# Range of the retention time (minutes) to include in further analyses
rt = c(4, 14)
dataset_pos <- filterRTmin(dataset_pos, rt = rt)
dataset_neg <- filterRTmin(dataset_neg, rt = rt)
# There are not QCs or blank samples in the present dataset
# An example is: especial_samples = list(QC = "DMSO-Ctrl", blank = "blank")
especial_samples = NULL
dataset_pos_by_class_type <- filterSampleType(dataset_pos, especial_samples = especial_samples)
dataset_neg_by_class_type <- filterSampleType(dataset_neg, especial_samples = especial_samples)
dataset_pos_no_blanks <-dataset_pos_by_class_type$regular_samples
# dataset_pos_blanks <- dataset_pos_by_class_type$blanks
# dataset_pos_qcs <- dataset_pos_by_class_type$qcs
dataset_neg_no_blanks <-dataset_neg_by_class_type$regular_samples
# dataset_neg_blanks <- dataset_neg_by_class_type$blanks
# dataset_neg_qcs <- dataset_neg_by_class_type$qcs
output_dir_node4 <- file.path(output_dir, "04-filtered-samples")
fs::dir_create(output_dir_node4)
positive_dataset_no_blanks_rds <- fs::path(output_dir_node4, "dataset_pos_no_blanks.rds")
lcms_dataset_save(dataset_pos_no_blanks, positive_dataset_no_blanks_rds)
negative_dataset_no_blanks_rds <- fs::path(output_dir_node4, "dataset_neg_no_blanks.rds")
lcms_dataset_save(dataset_neg_no_blanks, negative_dataset_no_blanks_rds)
lcms_meta_export(dataset_pos_no_blanks, fs::path(output_dir_node4, "metadata.xlsx"))
# In this step, we need to create a new folder to storage the optimization process
# The function requires this new and empty folder before running the optimization
output_dir_node5 <- file.path(output_dir, "05-optimization")
fs::dir_create(output_dir_node5)
optimize = FALSE
nSlaves = 1
opt_path = output_dir_node5
output_dir_node5
default_peakpeaking_params <- lcms_default_peakpeaking_params(optimize = optimize)
resultPeakpicking<- lcms_peakpicking_optimization(lcms_dataset = dataset_pos_no_blanks,
peakpickingParameters = default_peakpeaking_params,
nSlaves = nSlaves,
opt_path = opt_path,
plots = TRUE)
optimizedXcmsSetObject <- resultPeakpicking$best_settings$xset
resultPeakpicking_opt_rds <- fs::path(output_dir_node5, "resultPeakpicking_opt.rds")
lcms_dataset_save(resultPeakpicking, resultPeakpicking_opt_rds)
optimizedXcmsSetObject_rds <- fs::path(output_dir_node5, "optimizedXcmsSetObject.rds")
lcms_dataset_save(optimizedXcmsSetObject, optimizedXcmsSetObject_rds)
optimize = FALSE
nSlaves = 1
opt_path = output_dir_node5
output_dir_node5
retcorGroupParameters <- lcms_default_corgroup_params(optimize = optimize)
resultRetcorGroup  <- lcms_corgroup_optimization(optimizedXcmsSetObject = optimizedXcmsSetObject,
retcorGroupParameters = retcorGroupParameters,
nSlaves = nSlaves,
opt_path = opt_path)
resultRetcorGroup_opt_rds <- fs::path(output_dir_node5, "resultRetcorGroup_opt.rds")
lcms_dataset_save(resultRetcorGroup, resultRetcorGroup_opt_rds)
### Important file
IPO_params = write_opt_params(resultPeakpicking, resultRetcorGroup, output_dir_node5)
# Weindicate the directory in which the params.csv with the optimization is stored.
# Note that another previous params.csv file from last optimization steps could be used here.
directory_params <- output_dir_node5
preproc_params <- read_IPO_to_XCMS(directory_params)
output_dir_node6 <- file.path(output_dir, "06-rearrange-XCMS-MAIT-pos")
fs::dir_create(output_dir_node6)
path <- output_dir_node6
lcms_dataset = dataset_pos_no_blanks
project <- "LUMOS"
rearrange_datafiles_by_class(lcms_dataset = lcms_dataset,
dataDir = path)
fileList <- list.files(path = paste(path, list.files(path = path),
sep = "/"), full.names = TRUE)
fileList
# We re-create the dataset object aslo compatible with MAIT
dataset_pos_no_blanks <- lcms_read_samples(fileList, mode = "onDisk")
dataset_pos_no_blanks <- lcms_meta_add(dataset_pos_no_blanks, metadata, by = "sampleNames")
phData(dataset_pos_no_blanks)
params <- preproc_params
peakdet_pos_no_blanks = findChromPeaks_cwp (dataset_pos_no_blanks,
params = params)
peakdet_pos_align_no_blanks = align_Rtime(peakdet_pos_no_blanks,
params = params)
peak_table_pos = group_peaks(peakdet_pos_align_no_blanks,
params = params)
peak_table_pos <- fillChromPeaks(peak_table_pos)
output_dir_node7 <- file.path(output_dir, "07-data-preprocessing")
fs::dir_create(output_dir_node7)
detected_peak_pos_rds <- fs::path(output_dir_node7, "1_detected_peaks_pos.rds")
lcms_dataset_save(peakdet_pos_no_blanks, detected_peak_pos_rds)
aligned_peak_pos_rds <- fs::path(output_dir_node7, "2_aligned_peaks_pos.rds")
lcms_dataset_save(peakdet_pos_align_no_blanks, aligned_peak_pos_rds)
peak_table_pos_rds <- fs::path(output_dir_node7, "3_datapeak_table_processed_pos_imputed.rds")
lcms_dataset_save(peak_table_pos, peak_table_pos_rds)
# directory with the input
dataDir = output_dir_node6
# Name of the project to store info
project = "LUMOS"
# preproc parameters from xcms to convert
preproc_params = preproc_params
# imputed peak dataset from xcms
peakTable = peak_table_pos
peak_table_pos_MAIT <- suppressMessages(suppressWarnings(
to_MAIT(dataDir = dataDir,
project = project,
preproc_params = preproc_params,
peakTable = peakTable)))
peak_table_pos_ANN <- peak_annotation(MAIT.object = peak_table_pos_MAIT,
corrWithSamp = 0.7,
corrBetSamp = 0.75,
perfwhm = 0.6,
adductTable = NULL)
# save(peak_table_pos_ANN, file = "peak_table_pos_ANN.rda")
raw_data(peak_table_pos_ANN)
peak_table_pos_ANN@PhenoData@classes = c("X3.NPA", "Ctrl","UK.5099")
classes(peak_table_pos_ANN)
peak_table_pos_ANN@PhenoData@classes = c("X3NPA", "Ctrl","UK5099")
classes(peak_table_pos_ANN)
peak_table_pos_ANN_sig <- spectral_sig_features(MAIT.object = peak_table_pos_ANN,
pvalue=0.05,
p.adj="none",
scale=FALSE)
peak_table_pos_ANN
save(peak_table_pos_ANN_sig, file = "peak_table_pos_ANN_sig.rda")
MAIT.object = peak_table_pos_ANN_sig
MAIT.object = peak_table_pos_ANN_sig
MAIT.object_ANN_sig = peak_table_pos_ANN_sig
MAIT.object_ANN_sig = peak_table_pos_ANN_sig
signTable <- sig_peaks_table(MAIT.object = MAIT.object_ANN_sig,
printCSVfile = FALSE)
MAIT_object_id = peak_table_pos_ANN_sig
peak_table_pos_ANN_sig_id  <- identify_metabolites(MAIT.object = MAIT_object_id,
peakTolerance = 0.005)
library(MAIT)
View(identifyMetabolites)
load("C:/Users/fmadrid/Desktop/WS_sig_building_NIHSlcms.RData")
View(peak_table_pos_ANN_sig)
View(peak_table_pos_ANN_sig)
knitr::opts_chunk$set(echo = TRUE)
MAIT_object_id = peak_table_pos_ANN_sig
peak_table_pos_ANN_sig_id  <- identify_metabolites(MAIT.object = MAIT_object_id,
peakTolerance = 0.005)
library(NIHSlcms)
peak_table_pos_ANN_sig_id  <- identify_metabolites(MAIT.object = MAIT_object_id,
peakTolerance = 0.005)
View(peak_table_pos_ANN_sig_id)
metabolite_table = peak_table_pos_ANN_sig_id@FeatureInfo@metaboliteTable
metabolite_table = peak_table_pos_ANN_sig_id@FeatureInfo@metaboliteTable
metabolite_table
output_dir_node9 <- file.path(output_dir, "09-HMDB-identification")
fs::dir_create(output_dir_node9)
peak_table_pos_ANN_sig_id_rds <- fs::path(output_dir_node9, "peak_table_pos_ANN_sig_id.rds")
lcms_dataset_save(peak_table_pos_ANN_sig_id, peak_table_pos_ANN_sig_id_rds)
identification_fn <- file.path(output_dir_node9, "identification_HMDB.csv")
utils::write.csv(metabolite_table, identification_fn, row.names = FALSE)
metabolite_table
classes(peak_table_pos_ANN_sig_id)
# There are not QCs or blank samples in the present dataset
# An example is: especial_samples = list(QC = "DMSO-Ctrl", blank = "blank")
especial_samples = list(QC = "Ctrl", blank = NULL)
dataset_pos_by_class_type <- filterSampleType(dataset_pos, especial_samples = especial_samples)
dataset_neg_by_class_type <- filterSampleType(dataset_neg, especial_samples = especial_samples)
View(dataset_pos_by_class_type)
especial_samples = list(QC = "Ctrl")
dataset_pos_by_class_type <- filterSampleType(dataset_pos, especial_samples = especial_samples)
dataset_neg_by_class_type <- filterSampleType(dataset_neg, especial_samples = especial_samples)
View(dataset_neg_by_class_type)
View(dataset_pos_by_class_type)
knitr::opts_chunk$set(echo = TRUE)
library(NIHSlcms)
# Where converted samples are.
input_dir <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_dataset/20190313_Lumos_Samples/Data/converted"
# Where output will be stored.
output_dir <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_output"
# Where converted samples are.
path <- input_dir
# The format of LC-MS files to list (or list and convert).
file_format <- "mzXML"
# Directory where the RawConverter is.
# (in the case the files need to be converted from raw to mzXML)
rawconverter <- "C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS"
samples_mzxml <- list_mzxml_samples(path, file_format = file_format,
rawconverter = rawconverter)
samples_mzxml
dataset <- suppressWarnings(lcms_read_samples(samples_mzxml, mode = "onDisk"))
print(dataset)
output_dir_node1 <- file.path(output_dir, "01-load-samples")
fs::dir_create(output_dir_node1)
dataset_rds <- fs::path(output_dir_node1, "dataset.rds")
lcms_dataset_save(dataset, dataset_rds)
# Loading the metadata
metadata<- readxl::read_excel("C:/Users/fmadrid/Documents/IBEC/NESTLE/LCMS/HepG2_dataset/20190313_Lumos_Samples/20190313_DATA_IBEC_sample_key2.xlsx")
dataset <- lcms_meta_add(dataset, metadata, by = "sampleNames")
phData(dataset)
output_dir_node2 <- file.path(output_dir, "02-add-metadata")
fs::dir_create(output_dir_node2)
dataset_rds <- fs::path(output_dir_node2, "dataset.rds")
lcms_dataset_save(dataset, dataset_rds)
lcms_meta_export(dataset, fs::path(output_dir_node2, "metadata.xlsx"))
# Set to 1 for positive mode and 0 for negative mode.
dataset_pos <- filterPolarity(dataset, polarity. = 1)
dataset_neg <- filterPolarity(dataset, polarity. = 0)
tics_pos <- lcms_tics(dataset_pos)
# treatment_col <- scales::hue_pal()(length(unique(dataset$treatment)))
# names(treatment_col) <- unique(dataset$treatment)
lcms_plot_tics(tics_pos, treatment = treatment, rt = c(4, 14), plot_type = "spec")
lcms_plot_tics(tics_pos, treatment = treatment, rt = c(4, 14), plot_type = "boxplot")
tics_neg <- lcms_tics(dataset_neg)
lcms_plot_tics(tics_neg, rt = c(4, 14), plot_type = "spec")
lcms_plot_tics(tics_neg, rt = c(4, 14), plot_type = "boxplot")
output_dir_node3 <- file.path(output_dir, "03-split-polarities")
fs::dir_create(output_dir_node3)
positive_dataset_rds <- fs::path(output_dir_node3, "positive_dataset.rds")
lcms_dataset_save(dataset_pos, positive_dataset_rds)
negative_dataset_rds <- fs::path(output_dir_node3, "negative_dataset.rds")
lcms_dataset_save(dataset_neg, negative_dataset_rds)
lcms_meta_export(dataset_pos, fs::path(output_dir_node3, "metadata.xlsx"))
# Range of the retention time (minutes) to include in further analyses
rt = c(4, 14)
dataset_pos <- filterRTmin(dataset_pos, rt = rt)
dataset_neg <- filterRTmin(dataset_neg, rt = rt)
# There are not QCs or blank samples in the present dataset
# An example is: especial_samples = list(QC = "DMSO-Ctrl", blank = "blank")
especial_samples = list(QC = "Ctrl")
dataset_pos_by_class_type <- filterSampleType(dataset_pos, especial_samples = especial_samples)
dataset_neg_by_class_type <- filterSampleType(dataset_neg, especial_samples = especial_samples)
View(dataset_pos_by_class_type)
dataset_pos_no_blanks <-dataset_pos_by_class_type$regular_samples
# dataset_pos_blanks <- dataset_pos_by_class_type$blanks
dataset_pos_qcs <- dataset_pos_by_class_type$qcs
dataset_neg_no_blanks <-dataset_neg_by_class_type$regular_samples
# dataset_neg_blanks <- dataset_neg_by_class_type$blanks
dataset_neg_qcs <- dataset_neg_by_class_type$qcs
output_dir_node4 <- file.path(output_dir, "04-filtered-samples")
fs::dir_create(output_dir_node4)
positive_dataset_no_blanks_rds <- fs::path(output_dir_node4, "dataset_pos_no_blanks.rds")
lcms_dataset_save(dataset_pos_no_blanks, positive_dataset_no_blanks_rds)
negative_dataset_no_blanks_rds <- fs::path(output_dir_node4, "dataset_neg_no_blanks.rds")
lcms_dataset_save(dataset_neg_no_blanks, negative_dataset_no_blanks_rds)
lcms_meta_export(dataset_pos_no_blanks, fs::path(output_dir_node4, "metadata.xlsx"))
# In this step, we need to create a new folder to storage the optimization process
# The function requires this new and empty folder before running the optimization
output_dir_node5 <- file.path(output_dir, "05-optimization")
fs::dir_create(output_dir_node5)
optimize = FALSE
nSlaves = 1
opt_path = output_dir_node5
output_dir_node5
dataset_pos_no_blanks <-dataset_pos_by_class_type$regular_samples
# dataset_pos_blanks <- dataset_pos_by_class_type$blanks
dataset_pos_qcs <- dataset_pos_by_class_type$QCs
dataset_neg_no_blanks <-dataset_neg_by_class_type$regular_samples
# dataset_neg_blanks <- dataset_neg_by_class_type$blanks
dataset_neg_qcs <- dataset_neg_by_class_type$QCs
# In this step, we need to create a new folder to storage the optimization process
# The function requires this new and empty folder before running the optimization
output_dir_node5 <- file.path(output_dir, "05-optimization")
fs::dir_create(output_dir_node5)
# dataset used to optimize (control samples in this case for minimun time computation)
# you can use dataset_pos to use all samples
lcms_dataset = dataset_pos_qcs
# if to optimize or not
optimize = FALSE
# number of rounds, by default nSlaves = 1 because does the necessary to find the optimum
nSlaves = 1
# directory created for this purpose
opt_path = output_dir_node5
output_dir_node5
default_peakpeaking_params <- lcms_default_peakpeaking_params(optimize = optimize)
resultPeakpicking<- lcms_peakpicking_optimization(lcms_dataset = lcms_dataset,
peakpickingParameters = default_peakpeaking_params,
nSlaves = nSlaves,
opt_path = opt_path,
plots = TRUE)
# In this step, we need to create a new folder to storage the optimization process
# The function requires this new and empty folder before running the optimization
output_dir_node5 <- file.path(output_dir, "05-optimization")
fs::dir_create(output_dir_node5)
# dataset used to optimize (control samples in this case for minimun time computation)
# you can use dataset_pos to use all samples
lcms_dataset = dataset_pos_qcs
# if to optimize or not
optimize = TRUE
# number of rounds, by default nSlaves = 1 because does the necessary to find the optimum
nSlaves = 1
# directory created for this purpose
opt_path = output_dir_node5
output_dir_node5
default_peakpeaking_params <- lcms_default_peakpeaking_params(optimize = optimize)
resultPeakpicking<- lcms_peakpicking_optimization(lcms_dataset = lcms_dataset,
peakpickingParameters = default_peakpeaking_params,
nSlaves = nSlaves,
opt_path = opt_path,
plots = TRUE)
library(NIHSlcms)
knitr::opts_chunk$set(echo = TRUE)
default_peakpeaking_params <- lcms_default_peakpeaking_params(optimize = optimize)
resultPeakpicking<- lcms_peakpicking_optimization(lcms_dataset = lcms_dataset,
peakpickingParameters = default_peakpeaking_params,
nSlaves = nSlaves,
opt_path = opt_path,
plots = TRUE)
devtools::load_all(".")
packagename()
library(NIHSlcms)
library(NIHSlcms)
